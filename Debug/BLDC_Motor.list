
BLDC_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004590  08004590  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004598  08004598  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800459c  0800459c  0001459c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000010  080045b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080045b0  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b910  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a5d  00000000  00000000  0002b950  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  0002d3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be0  00000000  00000000  0002e068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e22  00000000  00000000  0002ec48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e3d  00000000  00000000  00044a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cafc  00000000  00000000  0004d8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da3a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a0  00000000  00000000  000da420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004558 	.word	0x08004558

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08004558 	.word	0x08004558

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fe25 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f84f 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 fa67 	bl	80009b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e6:	f000 fa45 	bl	8000974 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 fa19 	bl	8000920 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004ee:	f000 f921 	bl	8000734 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004f2:	f000 f9bd 	bl	8000870 <MX_TIM3_Init>
  MX_ADC1_Init();
 80004f6:	f000 f8af 	bl	8000658 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, ADC_Buffer, 3);
 80004fa:	2203      	movs	r2, #3
 80004fc:	491c      	ldr	r1, [pc, #112]	; (8000570 <main+0x9c>)
 80004fe:	481d      	ldr	r0, [pc, #116]	; (8000574 <main+0xa0>)
 8000500:	f000 fec8 	bl	8001294 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim3);
 8000504:	481c      	ldr	r0, [pc, #112]	; (8000578 <main+0xa4>)
 8000506:	f002 fcef 	bl	8002ee8 <HAL_TIM_Base_Start>
  HAL_TIMEx_ConfigCommutationEvent_IT(&htim1, TIM_TS_ITR2, TIM_COMMUTATION_TRGI);
 800050a:	2204      	movs	r2, #4
 800050c:	2120      	movs	r1, #32
 800050e:	481b      	ldr	r0, [pc, #108]	; (800057c <main+0xa8>)
 8000510:	f003 fade 	bl	8003ad0 <HAL_TIMEx_ConfigCommutEvent_IT>



  uint32_t time_tick = HAL_GetTick();
 8000514:	f000 fe6e 	bl	80011f4 <HAL_GetTick>
 8000518:	60f8      	str	r0, [r7, #12]
  uint32_t time_tick1 = HAL_GetTick();
 800051a:	f000 fe6b 	bl	80011f4 <HAL_GetTick>
 800051e:	60b8      	str	r0, [r7, #8]
  uint32_t ARR_TIM3_Data = 500;
 8000520:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000524:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if ((HAL_GetTick() - time_tick1) > 100)
 8000526:	f000 fe65 	bl	80011f4 <HAL_GetTick>
 800052a:	4602      	mov	r2, r0
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	1ad3      	subs	r3, r2, r3
 8000530:	2b64      	cmp	r3, #100	; 0x64
 8000532:	d913      	bls.n	800055c <main+0x88>
	  	  {
	  		  time_tick1 = HAL_GetTick();
 8000534:	f000 fe5e 	bl	80011f4 <HAL_GetTick>
 8000538:	60b8      	str	r0, [r7, #8]

	  		  if(ARR_TIM3_Data > 100)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b64      	cmp	r3, #100	; 0x64
 800053e:	d90d      	bls.n	800055c <main+0x88>
	  		  {
	  			ARR_TIM3_Data -= 20;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3b14      	subs	r3, #20
 8000544:	607b      	str	r3, [r7, #4]
	  			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <main+0xa4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
	  			__HAL_TIM_SET_AUTORELOAD(&htim3, ARR_TIM3_Data);
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <main+0xa4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <main+0xa4>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60d3      	str	r3, [r2, #12]
	  		  }
	  	  }

	  if ((HAL_GetTick() - time_tick) >= 1)
 800055c:	f000 fe4a 	bl	80011f4 <HAL_GetTick>
 8000560:	4602      	mov	r2, r0
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	4293      	cmp	r3, r2
 8000566:	d0de      	beq.n	8000526 <main+0x52>
	  {
		  time_tick = HAL_GetTick();
 8000568:	f000 fe44 	bl	80011f4 <HAL_GetTick>
 800056c:	60f8      	str	r0, [r7, #12]
	  if ((HAL_GetTick() - time_tick1) > 100)
 800056e:	e7da      	b.n	8000526 <main+0x52>
 8000570:	20000030 	.word	0x20000030
 8000574:	2000007c 	.word	0x2000007c
 8000578:	2000003c 	.word	0x2000003c
 800057c:	20000124 	.word	0x20000124

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f003 ffda 	bl	8004548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a28      	ldr	r2, [pc, #160]	; (8000650 <SystemClock_Config+0xd0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd4>)
 80005ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f4:	2310      	movs	r3, #16
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fe:	2304      	movs	r3, #4
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f80a 	bl	8002624 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000616:	f000 fb3d 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fa64 	bl	8002b04 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000642:	f000 fb27 	bl	8000c94 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066a:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MX_ADC1_Init+0xd0>)
 800066c:	4a2f      	ldr	r2, [pc, #188]	; (800072c <MX_ADC1_Init+0xd4>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <MX_ADC1_Init+0xd0>)
 8000672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_ADC1_Init+0xd0>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <MX_ADC1_Init+0xd0>)
 8000680:	2201      	movs	r2, #1
 8000682:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_ADC1_Init+0xd0>)
 8000686:	2201      	movs	r2, #1
 8000688:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b27      	ldr	r3, [pc, #156]	; (8000728 <MX_ADC1_Init+0xd0>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b25      	ldr	r3, [pc, #148]	; (8000728 <MX_ADC1_Init+0xd0>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <MX_ADC1_Init+0xd0>)
 800069a:	4a25      	ldr	r2, [pc, #148]	; (8000730 <MX_ADC1_Init+0xd8>)
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <MX_ADC1_Init+0xd0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <MX_ADC1_Init+0xd0>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_ADC1_Init+0xd0>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006b2:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_ADC1_Init+0xd0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b8:	481b      	ldr	r0, [pc, #108]	; (8000728 <MX_ADC1_Init+0xd0>)
 80006ba:	f000 fda7 	bl	800120c <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c4:	f000 fae6 	bl	8000c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006c8:	230d      	movs	r3, #13
 80006ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006d0:	2307      	movs	r3, #7
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <MX_ADC1_Init+0xd0>)
 80006da:	f000 fecd 	bl	8001478 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e4:	f000 fad6 	bl	8000c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006e8:	2308      	movs	r3, #8
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006ec:	2302      	movs	r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_ADC1_Init+0xd0>)
 80006f6:	f000 febf 	bl	8001478 <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000700:	f000 fac8 	bl	8000c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000704:	2307      	movs	r3, #7
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000708:	2303      	movs	r3, #3
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_ADC1_Init+0xd0>)
 8000712:	f000 feb1 	bl	8001478 <HAL_ADC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800071c:	f000 faba 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000007c 	.word	0x2000007c
 800072c:	40012000 	.word	0x40012000
 8000730:	0f000001 	.word	0x0f000001

08000734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b092      	sub	sp, #72	; 0x48
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2220      	movs	r2, #32
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f003 fef2 	bl	8004548 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <MX_TIM1_Init+0x134>)
 8000766:	4a41      	ldr	r2, [pc, #260]	; (800086c <MX_TIM1_Init+0x138>)
 8000768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 800076a:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <MX_TIM1_Init+0x134>)
 800076c:	2229      	movs	r2, #41	; 0x29
 800076e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000770:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <MX_TIM1_Init+0x134>)
 8000772:	2220      	movs	r2, #32
 8000774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000776:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <MX_TIM1_Init+0x134>)
 8000778:	2263      	movs	r2, #99	; 0x63
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_TIM1_Init+0x134>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <MX_TIM1_Init+0x134>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_TIM1_Init+0x134>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800078e:	4836      	ldr	r0, [pc, #216]	; (8000868 <MX_TIM1_Init+0x134>)
 8000790:	f002 fbf9 	bl	8002f86 <HAL_TIM_PWM_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800079a:	f000 fa7b 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007aa:	4619      	mov	r1, r3
 80007ac:	482e      	ldr	r0, [pc, #184]	; (8000868 <MX_TIM1_Init+0x134>)
 80007ae:	f003 f9ef 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80007b8:	f000 fa6c 	bl	8000c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007c8:	2300      	movs	r3, #0
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	4821      	ldr	r0, [pc, #132]	; (8000868 <MX_TIM1_Init+0x134>)
 80007e2:	f002 fde1 	bl	80033a8 <HAL_TIM_PWM_ConfigChannel>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80007ec:	f000 fa52 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f4:	2204      	movs	r2, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	481b      	ldr	r0, [pc, #108]	; (8000868 <MX_TIM1_Init+0x134>)
 80007fa:	f002 fdd5 	bl	80033a8 <HAL_TIM_PWM_ConfigChannel>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000804:	f000 fa46 	bl	8000c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	2208      	movs	r2, #8
 800080e:	4619      	mov	r1, r3
 8000810:	4815      	ldr	r0, [pc, #84]	; (8000868 <MX_TIM1_Init+0x134>)
 8000812:	f002 fdc9 	bl	80033a8 <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800081c:	f000 fa3a 	bl	8000c94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000824:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 16;
 8000830:	2310      	movs	r3, #16
 8000832:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000840:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000844:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	4619      	mov	r1, r3
 800084a:	4807      	ldr	r0, [pc, #28]	; (8000868 <MX_TIM1_Init+0x134>)
 800084c:	f003 fa0e 	bl	8003c6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000856:	f000 fa1d 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <MX_TIM1_Init+0x134>)
 800085c:	f000 fb42 	bl	8000ee4 <HAL_TIM_MspPostInit>

}
 8000860:	bf00      	nop
 8000862:	3748      	adds	r7, #72	; 0x48
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000124 	.word	0x20000124
 800086c:	40010000 	.word	0x40010000

08000870 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_TIM3_Init+0xa8>)
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <MX_TIM3_Init+0xac>)
 8000896:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_TIM3_Init+0xa8>)
 800089a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800089e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_TIM3_Init+0xa8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_TIM3_Init+0xa8>)
 80008a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_TIM3_Init+0xa8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_TIM3_Init+0xa8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <MX_TIM3_Init+0xa8>)
 80008bc:	f002 fb38 	bl	8002f30 <HAL_TIM_OC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008c6:	f000 f9e5 	bl	8000c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008ca:	2320      	movs	r3, #32
 80008cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	4619      	mov	r1, r3
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <MX_TIM3_Init+0xa8>)
 80008da:	f003 f959 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008e4:	f000 f9d6 	bl	8000c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_TIM3_Init+0xa8>)
 8000900:	f002 fcf2 	bl	80032e8 <HAL_TIM_OC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800090a:	f000 f9c3 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2000003c 	.word	0x2000003c
 800091c:	40000400 	.word	0x40000400

08000920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART2_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x4c>)
 8000958:	f003 fa09 	bl	8003d6e <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f997 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000164 	.word	0x20000164
 8000970:	40004400 	.word	0x40004400

08000974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_DMA_Init+0x3c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <MX_DMA_Init+0x3c>)
 8000984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_DMA_Init+0x3c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2038      	movs	r0, #56	; 0x38
 800099c:	f001 f8e7 	bl	8001b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009a0:	2038      	movs	r0, #56	; 0x38
 80009a2:	f001 f900 	bl	8001ba6 <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b4a      	ldr	r3, [pc, #296]	; (8000af8 <MX_GPIO_Init+0x144>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a49      	ldr	r2, [pc, #292]	; (8000af8 <MX_GPIO_Init+0x144>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <MX_GPIO_Init+0x144>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b43      	ldr	r3, [pc, #268]	; (8000af8 <MX_GPIO_Init+0x144>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a42      	ldr	r2, [pc, #264]	; (8000af8 <MX_GPIO_Init+0x144>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <MX_GPIO_Init+0x144>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <MX_GPIO_Init+0x144>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a3b      	ldr	r2, [pc, #236]	; (8000af8 <MX_GPIO_Init+0x144>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <MX_GPIO_Init+0x144>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <MX_GPIO_Init+0x144>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a34      	ldr	r2, [pc, #208]	; (8000af8 <MX_GPIO_Init+0x144>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <MX_GPIO_Init+0x144>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	482f      	ldr	r0, [pc, #188]	; (8000afc <MX_GPIO_Init+0x148>)
 8000a40:	f001 fdbc 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBY_RST_GPIO_Port, SBY_RST_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2180      	movs	r1, #128	; 0x80
 8000a48:	482d      	ldr	r0, [pc, #180]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a4a:	f001 fdb7 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COMM_GPIO_Port, COMM_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	482a      	ldr	r0, [pc, #168]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a56:	f001 fdb1 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4829      	ldr	r0, [pc, #164]	; (8000b04 <MX_GPIO_Init+0x150>)
 8000a60:	f001 fdac 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_GPIO_Init+0x154>)
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4821      	ldr	r0, [pc, #132]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a7a:	f001 fc1d 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a82:	2301      	movs	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4819      	ldr	r0, [pc, #100]	; (8000afc <MX_GPIO_Init+0x148>)
 8000a96:	f001 fc0f 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SBY_RST_Pin */
  GPIO_InitStruct.Pin = SBY_RST_Pin;
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a9e:	2311      	movs	r3, #17
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SBY_RST_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000ab2:	f001 fc01 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COMM_Pin */
  GPIO_InitStruct.Pin = COMM_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(COMM_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000ad0:	f001 fbf2 	bl	80022b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000ad4:	2320      	movs	r3, #32
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_GPIO_Init+0x150>)
 8000aec:	f001 fbe4 	bl	80022b8 <HAL_GPIO_Init>

}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020400 	.word	0x40020400
 8000b08:	10210000 	.word	0x10210000

08000b0c <HAL_TIMEx_CommutCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(COMM_GPIO_Port, COMM_Pin);
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	619a      	str	r2, [r3, #24]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;*/
	//HAL_GPIO_WritePin(COMM_GPIO_Port, COMM_Pin, SET);
	switch (step_number)
 8000b28:	4b56      	ldr	r3, [pc, #344]	; (8000c84 <HAL_TIMEx_CommutCallback+0x178>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	f200 8099 	bhi.w	8000c64 <HAL_TIMEx_CommutCallback+0x158>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <HAL_TIMEx_CommutCallback+0x2c>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000b55 	.word	0x08000b55
 8000b3c:	08000ba1 	.word	0x08000ba1
 8000b40:	08000bbb 	.word	0x08000bbb
 8000b44:	08000be9 	.word	0x08000be9
 8000b48:	08000c03 	.word	0x08000c03
 8000b4c:	08000c27 	.word	0x08000c27
 8000b50:	08000c41 	.word	0x08000c41
		    {
				case 0:
			        {


			        	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8000b54:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
			        	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, 0);
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	639a      	str	r2, [r3, #56]	; 0x38
			        	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, pulse);
 8000b64:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <HAL_TIMEx_CommutCallback+0x180>)
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	63da      	str	r2, [r3, #60]	; 0x3c

			        	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);           //TIM1_CH1 DISABLE
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4845      	ldr	r0, [pc, #276]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b72:	f002 fa65 	bl	8003040 <HAL_TIM_PWM_Stop>
						HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1) ;
 8000b76:	2100      	movs	r1, #0
 8000b78:	4843      	ldr	r0, [pc, #268]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b7a:	f002 ff68 	bl	8003a4e <HAL_TIMEx_PWMN_Stop>

						HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);           //TIM1_CH2 ENABLE
 8000b7e:	2104      	movs	r1, #4
 8000b80:	4841      	ldr	r0, [pc, #260]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b82:	f002 fa5d 	bl	8003040 <HAL_TIM_PWM_Stop>
						HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2) ;
 8000b86:	2104      	movs	r1, #4
 8000b88:	483f      	ldr	r0, [pc, #252]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b8a:	f002 ff36 	bl	80039fa <HAL_TIMEx_PWMN_Start>

						HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);           //TIM1_CH3 ENABLE
 8000b8e:	2108      	movs	r1, #8
 8000b90:	483d      	ldr	r0, [pc, #244]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b92:	f002 fa23 	bl	8002fdc <HAL_TIM_PWM_Start>
						 HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3) ;
 8000b96:	2108      	movs	r1, #8
 8000b98:	483b      	ldr	r0, [pc, #236]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000b9a:	f002 ff2e 	bl	80039fa <HAL_TIMEx_PWMN_Start>
			        }
			       break;
 8000b9e:	e061      	b.n	8000c64 <HAL_TIMEx_CommutCallback+0x158>
		        	//__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, pulse);

		        	//sConfigOC.OCMode = TIM_OCMODE_PWM1;
		        	//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);

		            HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);           //TIM1_CH1 ENABLE
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4839      	ldr	r0, [pc, #228]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000ba4:	f002 fa1a 	bl	8002fdc <HAL_TIM_PWM_Start>
		              HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1) ;
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4837      	ldr	r0, [pc, #220]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bac:	f002 ff25 	bl	80039fa <HAL_TIMEx_PWMN_Start>

			        	//sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
			        	//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);

		              //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);           //TIM1_CH3 DISABLE
		              HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_3) ;
 8000bb0:	2108      	movs	r1, #8
 8000bb2:	4835      	ldr	r0, [pc, #212]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bb4:	f002 ff4b 	bl	8003a4e <HAL_TIMEx_PWMN_Stop>
		        }
		       break;
 8000bb8:	e054      	b.n	8000c64 <HAL_TIMEx_CommutCallback+0x158>
		      case 2:
		        {
		        	HAL_GPIO_TogglePin(COMM_GPIO_Port, COMM_Pin);
 8000bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbe:	4834      	ldr	r0, [pc, #208]	; (8000c90 <HAL_TIMEx_CommutCallback+0x184>)
 8000bc0:	f001 fd15 	bl	80025ee <HAL_GPIO_TogglePin>

		        	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, pulse);
 8000bc4:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <HAL_TIMEx_CommutCallback+0x180>)
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
					//__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, 0);
					__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, 0);
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	63da      	str	r2, [r3, #60]	; 0x3c

					//sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
					//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);

					  //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);           //TIM1_CH2 DISABLE
					  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2) ;
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	482b      	ldr	r0, [pc, #172]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bda:	f002 ff38 	bl	8003a4e <HAL_TIMEx_PWMN_Stop>

					  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);           //TIM1_CH3 ENABLE
					  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3) ;
 8000bde:	2108      	movs	r1, #8
 8000be0:	4829      	ldr	r0, [pc, #164]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000be2:	f002 ff0a 	bl	80039fa <HAL_TIMEx_PWMN_Start>

		        }
		       break;
 8000be6:	e03d      	b.n	8000c64 <HAL_TIMEx_CommutCallback+0x158>

		        	//sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
		        	//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);

					//HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);           //TIM1_CH1 DISABLE
					HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1) ;
 8000be8:	2100      	movs	r1, #0
 8000bea:	4827      	ldr	r0, [pc, #156]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bec:	f002 ff2f 	bl	8003a4e <HAL_TIMEx_PWMN_Stop>

		        	//sConfigOC.OCMode = TIM_OCMODE_PWM1;
		        	//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);

					HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);           //TIM1_CH2 ENABLE
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4825      	ldr	r0, [pc, #148]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bf4:	f002 f9f2 	bl	8002fdc <HAL_TIM_PWM_Start>
					HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2) ;
 8000bf8:	2104      	movs	r1, #4
 8000bfa:	4823      	ldr	r0, [pc, #140]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000bfc:	f002 fefd 	bl	80039fa <HAL_TIMEx_PWMN_Start>

					//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);           //TIM1_CH3 ENABLE
					  //HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3) ;

		        }
		       break;
 8000c00:	e030      	b.n	8000c64 <HAL_TIMEx_CommutCallback+0x158>
		      case 4:
		        {
		        	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, pulse);
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1f      	ldr	r2, [pc, #124]	; (8000c8c <HAL_TIMEx_CommutCallback+0x180>)
 8000c10:	6812      	ldr	r2, [r2, #0]
 8000c12:	639a      	str	r2, [r3, #56]	; 0x38
					//__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, 0);

					//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);           //TIM1_CH1 ENABLE
					  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1) ;
 8000c14:	2100      	movs	r1, #0
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c18:	f002 feef 	bl	80039fa <HAL_TIMEx_PWMN_Start>

						//sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
						//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);

					  //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_3);           //TIM1_CH3 DISABLE
					  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_3) ;
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	481a      	ldr	r0, [pc, #104]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c20:	f002 ff15 	bl	8003a4e <HAL_TIMEx_PWMN_Stop>

		        }
		       break;
 8000c24:	e01e      	b.n	8000c64 <HAL_TIMEx_CommutCallback+0x158>

		        	//sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
		        	//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);

					  //HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);           //TIM1_CH2 DISABLE
					  HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2) ;
 8000c26:	2104      	movs	r1, #4
 8000c28:	4817      	ldr	r0, [pc, #92]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c2a:	f002 ff10 	bl	8003a4e <HAL_TIMEx_PWMN_Stop>

			        	//sConfigOC.OCMode = TIM_OCMODE_PWM1;
			        	//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
					  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);           //TIM1_CH3 ENABLE
 8000c2e:	2108      	movs	r1, #8
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c32:	f002 f9d3 	bl	8002fdc <HAL_TIM_PWM_Start>
					  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3) ;
 8000c36:	2108      	movs	r1, #8
 8000c38:	4813      	ldr	r0, [pc, #76]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c3a:	f002 fede 	bl	80039fa <HAL_TIMEx_PWMN_Start>

		        }
		       break;
 8000c3e:	e011      	b.n	8000c64 <HAL_TIMEx_CommutCallback+0x158>
		      case 6:
		        {
		        	//__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 0);
					__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, 0);
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, pulse);
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_TIMEx_CommutCallback+0x180>)
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	63da      	str	r2, [r3, #60]	; 0x3c

					//sConfigOC.OCMode = TIM_OCMODE_FORCED_INACTIVE;
					//HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);

					//HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);           //TIM1_CH1 DISABLE
					HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1) ;
 8000c52:	2100      	movs	r1, #0
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c56:	f002 fefa 	bl	8003a4e <HAL_TIMEx_PWMN_Stop>

					//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);           //TIM1_CH2 ENABLE
					HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2) ;
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_TIMEx_CommutCallback+0x17c>)
 8000c5e:	f002 fecc 	bl	80039fa <HAL_TIMEx_PWMN_Start>

					//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);           //TIM1_CH3 ENABLE
					 // HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3) ;

		        }
		       break;
 8000c62:	bf00      	nop
		    }

		  step_number++;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <HAL_TIMEx_CommutCallback+0x178>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_TIMEx_CommutCallback+0x178>)
 8000c6c:	6013      	str	r3, [r2, #0]

		  if(step_number > 6)
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_TIMEx_CommutCallback+0x178>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	dd02      	ble.n	8000c7c <HAL_TIMEx_CommutCallback+0x170>
			  step_number = 1;
 8000c76:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_TIMEx_CommutCallback+0x178>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]

			  if(step_number < 1)
				  step_number = 6;*/

		  //HAL_GPIO_WritePin(COMM_GPIO_Port, COMM_Pin,RESET);
}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000002c 	.word	0x2000002c
 8000c88:	20000124 	.word	0x20000124
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	40020800 	.word	0x40020800

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <Error_Handler+0x6>

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cda:	2007      	movs	r0, #7
 8000cdc:	f000 ff3c 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a4a      	ldr	r2, [pc, #296]	; (8000e34 <HAL_ADC_MspInit+0x148>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	f040 808d 	bne.w	8000e2a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	4a47      	ldr	r2, [pc, #284]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d20:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a40      	ldr	r2, [pc, #256]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d36:	f043 0304 	orr.w	r3, r3, #4
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <HAL_ADC_MspInit+0x14c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d80:	2308      	movs	r3, #8
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 031c 	add.w	r3, r7, #28
 8000d90:	4619      	mov	r1, r3
 8000d92:	482a      	ldr	r0, [pc, #168]	; (8000e3c <HAL_ADC_MspInit+0x150>)
 8000d94:	f001 fa90 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4825      	ldr	r0, [pc, #148]	; (8000e40 <HAL_ADC_MspInit+0x154>)
 8000dac:	f001 fa84 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4820      	ldr	r0, [pc, #128]	; (8000e44 <HAL_ADC_MspInit+0x158>)
 8000dc4:	f001 fa78 	bl	80022b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000dca:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <HAL_ADC_MspInit+0x160>)
 8000dcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000dea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dfe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000e10:	f000 fee4 	bl	8001bdc <HAL_DMA_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8000e1a:	f7ff ff3b 	bl	8000c94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
 8000e24:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_ADC_MspInit+0x15c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3730      	adds	r7, #48	; 0x30
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012000 	.word	0x40012000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020400 	.word	0x40020400
 8000e48:	200000c4 	.word	0x200000c4
 8000e4c:	40026410 	.word	0x40026410

08000e50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <HAL_TIM_PWM_MspInit+0x48>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d115      	bne.n	8000e8e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_TIM_PWM_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <HAL_TIM_PWM_MspInit+0x4c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_TIM_PWM_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	201a      	movs	r0, #26
 8000e84:	f000 fe73 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e88:	201a      	movs	r0, #26
 8000e8a:	f000 fe8c 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_TIM_OC_MspInit+0x3c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d10d      	bne.n	8000ece <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_TIM_OC_MspInit+0x40>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_TIM_OC_MspInit+0x40>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <HAL_TIM_OC_MspInit+0x40>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	40023800 	.word	0x40023800

08000ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <HAL_TIM_MspPostInit+0xa8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d13d      	bne.n	8000f82 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HAL_TIM_MspPostInit+0xac>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <HAL_TIM_MspPostInit+0xac>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_TIM_MspPostInit+0xac>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <HAL_TIM_MspPostInit+0xac>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_TIM_MspPostInit+0xac>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_TIM_MspPostInit+0xac>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14;
 8000f3e:	f246 0302 	movw	r3, #24578	; 0x6002
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <HAL_TIM_MspPostInit+0xb0>)
 8000f5c:	f001 f9ac 	bl	80022b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f60:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4806      	ldr	r0, [pc, #24]	; (8000f98 <HAL_TIM_MspPostInit+0xb4>)
 8000f7e:	f001 f99b 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_UART_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12b      	bne.n	8001016 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_UART_MspInit+0x88>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001006:	2307      	movs	r3, #7
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_UART_MspInit+0x8c>)
 8001012:	f001 f951 	bl	80022b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40004400 	.word	0x40004400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f8a8 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001086:	f002 f827 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000124 	.word	0x20000124

08001094 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA2_Stream0_IRQHandler+0x10>)
 800109a:	f000 fea5 	bl	8001de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000c4 	.word	0x200000c4

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SystemInit+0x28>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <SystemInit+0x28>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SystemInit+0x28>)
 80010be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c2:	609a      	str	r2, [r3, #8]
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800110c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010da:	e003      	b.n	80010e4 <LoopCopyDataInit>

080010dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010e2:	3104      	adds	r1, #4

080010e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010ec:	d3f6      	bcc.n	80010dc <CopyDataInit>
  ldr  r2, =_sbss
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010f0:	e002      	b.n	80010f8 <LoopFillZerobss>

080010f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010f4:	f842 3b04 	str.w	r3, [r2], #4

080010f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010fc:	d3f9      	bcc.n	80010f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010fe:	f7ff ffd3 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001102:	f003 f9fd 	bl	8004500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001106:	f7ff f9e5 	bl	80004d4 <main>
  bx  lr    
 800110a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001110:	080045a0 	.word	0x080045a0
  ldr  r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001118:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800111c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001120:	200001a8 	.word	0x200001a8

08001124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <HAL_Init+0x40>)
 8001132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_Init+0x40>)
 800113e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	; (8001168 <HAL_Init+0x40>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 fd01 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f000 f808 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fd9e 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd19 	bl	8001bc2 <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 fce1 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	; (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000004 	.word	0x20000004
 80011c4:	2000000c 	.word	0x2000000c
 80011c8:	20000008 	.word	0x20000008

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	200001a4 	.word	0x200001a4

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	; (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200001a4 	.word	0x200001a4

0800120c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e033      	b.n	800128a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2b00      	cmp	r3, #0
 8001228:	d109      	bne.n	800123e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fd5e 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 0310 	and.w	r3, r3, #16
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001252:	f023 0302 	bic.w	r3, r3, #2
 8001256:	f043 0202 	orr.w	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fa2c 	bl	80016bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f023 0303 	bic.w	r3, r3, #3
 8001272:	f043 0201 	orr.w	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	e001      	b.n	8001280 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_ADC_Start_DMA+0x1e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e0b1      	b.n	8001416 <HAL_ADC_Start_DMA+0x182>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d018      	beq.n	80012fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012d8:	4b51      	ldr	r3, [pc, #324]	; (8001420 <HAL_ADC_Start_DMA+0x18c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a51      	ldr	r2, [pc, #324]	; (8001424 <HAL_ADC_Start_DMA+0x190>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9a      	lsrs	r2, r3, #18
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012ec:	e002      	b.n	80012f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f9      	bne.n	80012ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	f040 8085 	bne.w	8001414 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001312:	f023 0301 	bic.w	r3, r3, #1
 8001316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001334:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001348:	d106      	bne.n	8001358 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f023 0206 	bic.w	r2, r3, #6
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
 8001356:	e002      	b.n	800135e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_ADC_Start_DMA+0x194>)
 8001368:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	4a2f      	ldr	r2, [pc, #188]	; (800142c <HAL_ADC_Start_DMA+0x198>)
 8001370:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001376:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <HAL_ADC_Start_DMA+0x19c>)
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <HAL_ADC_Start_DMA+0x1a0>)
 8001380:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800138a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800139a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	334c      	adds	r3, #76	; 0x4c
 80013b6:	4619      	mov	r1, r3
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f000 fcbc 	bl	8001d38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10f      	bne.n	80013ec <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d11c      	bne.n	8001414 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	e013      	b.n	8001414 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_ADC_Start_DMA+0x1a4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10e      	bne.n	8001414 <HAL_ADC_Start_DMA+0x180>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d107      	bne.n	8001414 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001412:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000004 	.word	0x20000004
 8001424:	431bde83 	.word	0x431bde83
 8001428:	40012300 	.word	0x40012300
 800142c:	080018b5 	.word	0x080018b5
 8001430:	0800196f 	.word	0x0800196f
 8001434:	0800198b 	.word	0x0800198b
 8001438:	40012000 	.word	0x40012000

0800143c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x1c>
 8001490:	2302      	movs	r3, #2
 8001492:	e105      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x228>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b09      	cmp	r3, #9
 80014a2:	d925      	bls.n	80014f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68d9      	ldr	r1, [r3, #12]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	3b1e      	subs	r3, #30
 80014ba:	2207      	movs	r2, #7
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43da      	mvns	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	400a      	ands	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68d9      	ldr	r1, [r3, #12]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	4603      	mov	r3, r0
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4403      	add	r3, r0
 80014e2:	3b1e      	subs	r3, #30
 80014e4:	409a      	lsls	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	e022      	b.n	8001536 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6919      	ldr	r1, [r3, #16]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	2207      	movs	r2, #7
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6919      	ldr	r1, [r3, #16]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	4603      	mov	r3, r0
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4403      	add	r3, r0
 800152c:	409a      	lsls	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b06      	cmp	r3, #6
 800153c:	d824      	bhi.n	8001588 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b05      	subs	r3, #5
 8001550:	221f      	movs	r2, #31
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4618      	mov	r0, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	3b05      	subs	r3, #5
 800157a:	fa00 f203 	lsl.w	r2, r0, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
 8001586:	e04c      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b0c      	cmp	r3, #12
 800158e:	d824      	bhi.n	80015da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	3b23      	subs	r3, #35	; 0x23
 80015a2:	221f      	movs	r2, #31
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43da      	mvns	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	400a      	ands	r2, r1
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	3b23      	subs	r3, #35	; 0x23
 80015cc:	fa00 f203 	lsl.w	r2, r0, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	631a      	str	r2, [r3, #48]	; 0x30
 80015d8:	e023      	b.n	8001622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	3b41      	subs	r3, #65	; 0x41
 80015ec:	221f      	movs	r2, #31
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	400a      	ands	r2, r1
 80015fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	3b41      	subs	r3, #65	; 0x41
 8001616:	fa00 f203 	lsl.w	r2, r0, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_ADC_ConfigChannel+0x234>)
 8001624:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <HAL_ADC_ConfigChannel+0x238>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d109      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1cc>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b12      	cmp	r3, #18
 8001636:	d105      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_ADC_ConfigChannel+0x238>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d123      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b10      	cmp	r3, #16
 8001654:	d003      	beq.n	800165e <HAL_ADC_ConfigChannel+0x1e6>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b11      	cmp	r3, #17
 800165c:	d11b      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d111      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_ADC_ConfigChannel+0x23c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <HAL_ADC_ConfigChannel+0x240>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9a      	lsrs	r2, r3, #18
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001688:	e002      	b.n	8001690 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3b01      	subs	r3, #1
 800168e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40012300 	.word	0x40012300
 80016b0:	40012000 	.word	0x40012000
 80016b4:	20000004 	.word	0x20000004
 80016b8:	431bde83 	.word	0x431bde83

080016bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016c4:	4b79      	ldr	r3, [pc, #484]	; (80018ac <ADC_Init+0x1f0>)
 80016c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	431a      	orrs	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6859      	ldr	r1, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	021a      	lsls	r2, r3, #8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6859      	ldr	r1, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6899      	ldr	r1, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <ADC_Init+0x1f4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d022      	beq.n	800179a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6899      	ldr	r1, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e00f      	b.n	80017ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0202 	bic.w	r2, r2, #2
 80017c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6899      	ldr	r1, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7e1b      	ldrb	r3, [r3, #24]
 80017d4:	005a      	lsls	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	3b01      	subs	r3, #1
 8001814:	035a      	lsls	r2, r3, #13
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e007      	b.n	8001830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	3b01      	subs	r3, #1
 800184c:	051a      	lsls	r2, r3, #20
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001872:	025a      	lsls	r2, r3, #9
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	029a      	lsls	r2, r3, #10
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40012300 	.word	0x40012300
 80018b0:	0f000001 	.word	0x0f000001

080018b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d13c      	bne.n	8001948 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d12b      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d127      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001908:	2b00      	cmp	r3, #0
 800190a:	d119      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0220 	bic.w	r2, r2, #32
 800191a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fd7b 	bl	800143c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001946:	e00e      	b.n	8001966 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f7ff fd85 	bl	8001464 <HAL_ADC_ErrorCallback>
}
 800195a:	e004      	b.n	8001966 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	4798      	blx	r3
}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fd67 	bl	8001450 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	; 0x40
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f043 0204 	orr.w	r2, r3, #4
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fd5a 	bl	8001464 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <__NVIC_EnableIRQ+0x38>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff29 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff3e 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff31 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fb04 	bl	80011f4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e099      	b.n	8001d2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c18:	e00f      	b.n	8001c3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c1a:	f7ff faeb 	bl	80011f4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d908      	bls.n	8001c3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2203      	movs	r2, #3
 8001c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e078      	b.n	8001d2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e8      	bne.n	8001c1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <HAL_DMA_Init+0x158>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d107      	bne.n	8001ca4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f023 0307 	bic.w	r3, r3, #7
 8001cba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d117      	bne.n	8001cfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00e      	beq.n	8001cfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fa6f 	bl	80021c4 <DMA_CheckFifoParam>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e016      	b.n	8001d2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fa26 	bl	8002158 <DMA_CalcBaseAndBitshift>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	223f      	movs	r2, #63	; 0x3f
 8001d16:	409a      	lsls	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	f010803f 	.word	0xf010803f

08001d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_Start_IT+0x26>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e040      	b.n	8001de0 <HAL_DMA_Start_IT+0xa8>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d12f      	bne.n	8001dd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f9b8 	bl	80020fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	223f      	movs	r2, #63	; 0x3f
 8001d92:	409a      	lsls	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0216 	orr.w	r2, r2, #22
 8001da6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e005      	b.n	8001dde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_DMA_IRQHandler+0x258>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a92      	ldr	r2, [pc, #584]	; (8002044 <HAL_DMA_IRQHandler+0x25c>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0a9b      	lsrs	r3, r3, #10
 8001e00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2208      	movs	r2, #8
 8001e14:	409a      	lsls	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d01a      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0204 	bic.w	r2, r2, #4
 8001e3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2208      	movs	r2, #8
 8001e42:	409a      	lsls	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	2201      	movs	r2, #1
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d012      	beq.n	8001e8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	2201      	movs	r2, #1
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f043 0202 	orr.w	r2, r3, #2
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	2204      	movs	r2, #4
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d012      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	2204      	movs	r2, #4
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d043      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d03c      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	409a      	lsls	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d018      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d024      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
 8001f16:	e01f      	b.n	8001f58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e016      	b.n	8001f58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0208 	bic.w	r2, r2, #8
 8001f46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 808e 	beq.w	8002086 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 8086 	beq.w	8002086 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2220      	movs	r2, #32
 8001f80:	409a      	lsls	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d136      	bne.n	8002000 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0216 	bic.w	r2, r2, #22
 8001fa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	695a      	ldr	r2, [r3, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <HAL_DMA_IRQHandler+0x1da>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0208 	bic.w	r2, r2, #8
 8001fd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	223f      	movs	r2, #63	; 0x3f
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d07d      	beq.n	80020f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
        }
        return;
 8001ffe:	e078      	b.n	80020f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d01c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d108      	bne.n	800202e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	2b00      	cmp	r3, #0
 8002022:	d030      	beq.n	8002086 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
 800202c:	e02b      	b.n	8002086 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002032:	2b00      	cmp	r3, #0
 8002034:	d027      	beq.n	8002086 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	4798      	blx	r3
 800203e:	e022      	b.n	8002086 <HAL_DMA_IRQHandler+0x29e>
 8002040:	20000004 	.word	0x20000004
 8002044:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10f      	bne.n	8002076 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0210 	bic.w	r2, r2, #16
 8002064:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	2b00      	cmp	r3, #0
 800208c:	d032      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d022      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2205      	movs	r2, #5
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0201 	bic.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3301      	adds	r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d307      	bcc.n	80020ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f2      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x2ca>
 80020cc:	e000      	b.n	80020d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
 80020f0:	e000      	b.n	80020f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020f2:	bf00      	nop
    }
  }
}
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop

080020fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002118:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b40      	cmp	r3, #64	; 0x40
 8002128:	d108      	bne.n	800213c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800213a:	e007      	b.n	800214c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	60da      	str	r2, [r3, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	3b10      	subs	r3, #16
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <DMA_CalcBaseAndBitshift+0x64>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d909      	bls.n	800219a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218e:	f023 0303 	bic.w	r3, r3, #3
 8002192:	1d1a      	adds	r2, r3, #4
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	659a      	str	r2, [r3, #88]	; 0x58
 8002198:	e007      	b.n	80021aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	aaaaaaab 	.word	0xaaaaaaab
 80021c0:	08004588 	.word	0x08004588

080021c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d11f      	bne.n	800221e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d855      	bhi.n	8002290 <DMA_CheckFifoParam+0xcc>
 80021e4:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <DMA_CheckFifoParam+0x28>)
 80021e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ea:	bf00      	nop
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	0800220f 	.word	0x0800220f
 80021f4:	080021fd 	.word	0x080021fd
 80021f8:	08002291 	.word	0x08002291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d045      	beq.n	8002294 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220c:	e042      	b.n	8002294 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002216:	d13f      	bne.n	8002298 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221c:	e03c      	b.n	8002298 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002226:	d121      	bne.n	800226c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d836      	bhi.n	800229c <DMA_CheckFifoParam+0xd8>
 800222e:	a201      	add	r2, pc, #4	; (adr r2, 8002234 <DMA_CheckFifoParam+0x70>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	08002245 	.word	0x08002245
 8002238:	0800224b 	.word	0x0800224b
 800223c:	08002245 	.word	0x08002245
 8002240:	0800225d 	.word	0x0800225d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      break;
 8002248:	e02f      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d024      	beq.n	80022a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800225a:	e021      	b.n	80022a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002264:	d11e      	bne.n	80022a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800226a:	e01b      	b.n	80022a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <DMA_CheckFifoParam+0xb4>
 8002272:	2b03      	cmp	r3, #3
 8002274:	d003      	beq.n	800227e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002276:	e018      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e015      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00e      	beq.n	80022a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      break;
 800228e:	e00b      	b.n	80022a8 <DMA_CheckFifoParam+0xe4>
      break;
 8002290:	bf00      	nop
 8002292:	e00a      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 8002294:	bf00      	nop
 8002296:	e008      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 8002298:	bf00      	nop
 800229a:	e006      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 800229c:	bf00      	nop
 800229e:	e004      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 80022a0:	bf00      	nop
 80022a2:	e002      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;   
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <DMA_CheckFifoParam+0xe6>
      break;
 80022a8:	bf00      	nop
    }
  } 
  
  return status; 
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	e159      	b.n	8002588 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f040 8148 	bne.w	8002582 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d00b      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d007      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b12      	cmp	r3, #18
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0xfc>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b12      	cmp	r3, #18
 80023b2:	d123      	bne.n	80023fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	220f      	movs	r2, #15
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	08da      	lsrs	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0203 	and.w	r2, r3, #3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80a2 	beq.w	8002582 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b56      	ldr	r3, [pc, #344]	; (800259c <HAL_GPIO_Init+0x2e4>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a55      	ldr	r2, [pc, #340]	; (800259c <HAL_GPIO_Init+0x2e4>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_GPIO_Init+0x2e4>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800245a:	4a51      	ldr	r2, [pc, #324]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	3302      	adds	r3, #2
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	220f      	movs	r2, #15
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <HAL_GPIO_Init+0x2ec>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d019      	beq.n	80024ba <HAL_GPIO_Init+0x202>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a47      	ldr	r2, [pc, #284]	; (80025a8 <HAL_GPIO_Init+0x2f0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0x1fe>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a46      	ldr	r2, [pc, #280]	; (80025ac <HAL_GPIO_Init+0x2f4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x1fa>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a45      	ldr	r2, [pc, #276]	; (80025b0 <HAL_GPIO_Init+0x2f8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x1f6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a44      	ldr	r2, [pc, #272]	; (80025b4 <HAL_GPIO_Init+0x2fc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x1f2>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x204>
 80024ba:	2300      	movs	r3, #0
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f002 0203 	and.w	r2, r2, #3
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024cc:	4934      	ldr	r1, [pc, #208]	; (80025a0 <HAL_GPIO_Init+0x2e8>)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_GPIO_Init+0x300>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024fe:	4a2e      	ldr	r2, [pc, #184]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002504:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_GPIO_Init+0x300>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002552:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_GPIO_Init+0x300>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_GPIO_Init+0x300>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_GPIO_Init+0x300>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2b0f      	cmp	r3, #15
 800258c:	f67f aea2 	bls.w	80022d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002590:	bf00      	nop
 8002592:	3724      	adds	r7, #36	; 0x24
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	40023800 	.word	0x40023800
 80025a0:	40013800 	.word	0x40013800
 80025a4:	40020000 	.word	0x40020000
 80025a8:	40020400 	.word	0x40020400
 80025ac:	40020800 	.word	0x40020800
 80025b0:	40020c00 	.word	0x40020c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40013c00 	.word	0x40013c00

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	401a      	ands	r2, r3
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	429a      	cmp	r2, r3
 8002606:	d104      	bne.n	8002612 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	041a      	lsls	r2, r3, #16
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002610:	e002      	b.n	8002618 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002612:	887a      	ldrh	r2, [r7, #2]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	619a      	str	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e25b      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d075      	beq.n	800272e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002642:	4ba3      	ldr	r3, [pc, #652]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
 800264a:	2b04      	cmp	r3, #4
 800264c:	d00c      	beq.n	8002668 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4ba0      	ldr	r3, [pc, #640]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002656:	2b08      	cmp	r3, #8
 8002658:	d112      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265a:	4b9d      	ldr	r3, [pc, #628]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002662:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002666:	d10b      	bne.n	8002680 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	4b99      	ldr	r3, [pc, #612]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d05b      	beq.n	800272c <HAL_RCC_OscConfig+0x108>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d157      	bne.n	800272c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e236      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x74>
 800268a:	4b91      	ldr	r3, [pc, #580]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a90      	ldr	r2, [pc, #576]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e01d      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x98>
 80026a2:	4b8b      	ldr	r3, [pc, #556]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a8a      	ldr	r2, [pc, #552]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a87      	ldr	r2, [pc, #540]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0xb0>
 80026bc:	4b84      	ldr	r3, [pc, #528]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a83      	ldr	r2, [pc, #524]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a80      	ldr	r2, [pc, #512]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d013      	beq.n	8002704 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fd8a 	bl	80011f4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fd86 	bl	80011f4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1fb      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b76      	ldr	r3, [pc, #472]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0xc0>
 8002702:	e014      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fd76 	bl	80011f4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270c:	f7fe fd72 	bl	80011f4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1e7      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	4b6c      	ldr	r3, [pc, #432]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0xe8>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d063      	beq.n	8002802 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800273a:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800274e:	2b08      	cmp	r3, #8
 8002750:	d11c      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002752:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d116      	bne.n	800278c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e1bb      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002776:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4952      	ldr	r1, [pc, #328]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278a:	e03a      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d020      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002794:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <HAL_RCC_OscConfig+0x2b0>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fd2b 	bl	80011f4 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fd27 	bl	80011f4 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e19c      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b43      	ldr	r3, [pc, #268]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4940      	ldr	r1, [pc, #256]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
 80027d4:	e015      	b.n	8002802 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d6:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_OscConfig+0x2b0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe fd0a 	bl	80011f4 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e4:	f7fe fd06 	bl	80011f4 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e17b      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d030      	beq.n	8002870 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <HAL_RCC_OscConfig+0x2b4>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7fe fcea 	bl	80011f4 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002824:	f7fe fce6 	bl	80011f4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e15b      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0x200>
 8002842:	e015      	b.n	8002870 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_RCC_OscConfig+0x2b4>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe fcd3 	bl	80011f4 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002852:	f7fe fccf 	bl	80011f4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e144      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f0      	bne.n	8002852 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 80a0 	beq.w	80029be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_OscConfig+0x2b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d121      	bne.n	80028fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_RCC_OscConfig+0x2b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a07      	ldr	r2, [pc, #28]	; (80028dc <HAL_RCC_OscConfig+0x2b8>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fc95 	bl	80011f4 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e011      	b.n	80028f2 <HAL_RCC_OscConfig+0x2ce>
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	42470000 	.word	0x42470000
 80028d8:	42470e80 	.word	0x42470e80
 80028dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fc88 	bl	80011f4 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e0fd      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b81      	ldr	r3, [pc, #516]	; (8002af8 <HAL_RCC_OscConfig+0x4d4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x2f0>
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
 8002912:	e01c      	b.n	800294e <HAL_RCC_OscConfig+0x32a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b05      	cmp	r3, #5
 800291a:	d10c      	bne.n	8002936 <HAL_RCC_OscConfig+0x312>
 800291c:	4b77      	ldr	r3, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a76      	ldr	r2, [pc, #472]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	4b74      	ldr	r3, [pc, #464]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	4a73      	ldr	r2, [pc, #460]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6713      	str	r3, [r2, #112]	; 0x70
 8002934:	e00b      	b.n	800294e <HAL_RCC_OscConfig+0x32a>
 8002936:	4b71      	ldr	r3, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a70      	ldr	r2, [pc, #448]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
 8002942:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a6d      	ldr	r2, [pc, #436]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d015      	beq.n	8002982 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe fc4d 	bl	80011f4 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800295e:	f7fe fc49 	bl	80011f4 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	f241 3288 	movw	r2, #5000	; 0x1388
 800296c:	4293      	cmp	r3, r2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0bc      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	4b61      	ldr	r3, [pc, #388]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ee      	beq.n	800295e <HAL_RCC_OscConfig+0x33a>
 8002980:	e014      	b.n	80029ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002982:	f7fe fc37 	bl	80011f4 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002988:	e00a      	b.n	80029a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fc33 	bl	80011f4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f241 3288 	movw	r2, #5000	; 0x1388
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e0a6      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a0:	4b56      	ldr	r3, [pc, #344]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ee      	bne.n	800298a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d105      	bne.n	80029be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b2:	4b52      	ldr	r3, [pc, #328]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a51      	ldr	r2, [pc, #324]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8092 	beq.w	8002aec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029c8:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d05c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d141      	bne.n	8002a60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b48      	ldr	r3, [pc, #288]	; (8002b00 <HAL_RCC_OscConfig+0x4dc>)
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e2:	f7fe fc07 	bl	80011f4 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ea:	f7fe fc03 	bl	80011f4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e078      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fc:	4b3f      	ldr	r3, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	019b      	lsls	r3, r3, #6
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	061b      	lsls	r3, r3, #24
 8002a2c:	4933      	ldr	r1, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a32:	4b33      	ldr	r3, [pc, #204]	; (8002b00 <HAL_RCC_OscConfig+0x4dc>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fbdc 	bl	80011f4 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fbd8 	bl	80011f4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04d      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x41c>
 8002a5e:	e045      	b.n	8002aec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x4dc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7fe fbc5 	bl	80011f4 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe fbc1 	bl	80011f4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e036      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x44a>
 8002a8c:	e02e      	b.n	8002aec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e029      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCC_OscConfig+0x4d8>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d115      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470060 	.word	0x42470060

08002b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0cc      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d90c      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0b8      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d020      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	494d      	ldr	r1, [pc, #308]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d044      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d119      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e07f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d003      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e06f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e067      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be2:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4934      	ldr	r1, [pc, #208]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf4:	f7fe fafe 	bl	80011f4 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfc:	f7fe fafa 	bl	80011f4 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e04f      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 020c 	and.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1eb      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d20c      	bcs.n	8002c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e032      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	4916      	ldr	r1, [pc, #88]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	490e      	ldr	r1, [pc, #56]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8a:	f000 f821 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c8e:	4601      	mov	r1, r0
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9c:	5cd3      	ldrb	r3, [r2, r3]
 8002c9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ca2:	4a09      	ldr	r2, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fa5e 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40023c00 	.word	0x40023c00
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	08004570 	.word	0x08004570
 8002cc8:	20000004 	.word	0x20000004
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d007      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x32>
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 80b4 	bne.w	8002e64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cfc:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cfe:	60bb      	str	r3, [r7, #8]
       break;
 8002d00:	e0b3      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d02:	4b5e      	ldr	r3, [pc, #376]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e0b0      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d08:	4b5a      	ldr	r3, [pc, #360]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d04a      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	ea03 0501 	and.w	r5, r3, r1
 8002d34:	ea04 0602 	and.w	r6, r4, r2
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4632      	mov	r2, r6
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	f04f 0400 	mov.w	r4, #0
 8002d44:	0154      	lsls	r4, r2, #5
 8002d46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d4a:	014b      	lsls	r3, r1, #5
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4622      	mov	r2, r4
 8002d50:	1b49      	subs	r1, r1, r5
 8002d52:	eb62 0206 	sbc.w	r2, r2, r6
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0194      	lsls	r4, r2, #6
 8002d60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d64:	018b      	lsls	r3, r1, #6
 8002d66:	1a5b      	subs	r3, r3, r1
 8002d68:	eb64 0402 	sbc.w	r4, r4, r2
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	00e2      	lsls	r2, r4, #3
 8002d76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d7a:	00d9      	lsls	r1, r3, #3
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4614      	mov	r4, r2
 8002d80:	195b      	adds	r3, r3, r5
 8002d82:	eb44 0406 	adc.w	r4, r4, r6
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	0262      	lsls	r2, r4, #9
 8002d90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d94:	0259      	lsls	r1, r3, #9
 8002d96:	460b      	mov	r3, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f04f 0400 	mov.w	r4, #0
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	f7fd fa14 	bl	80001d4 <__aeabi_uldivmod>
 8002dac:	4603      	mov	r3, r0
 8002dae:	460c      	mov	r4, r1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e049      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db4:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	ea03 0501 	and.w	r5, r3, r1
 8002dca:	ea04 0602 	and.w	r6, r4, r2
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4632      	mov	r2, r6
 8002dd2:	f04f 0300 	mov.w	r3, #0
 8002dd6:	f04f 0400 	mov.w	r4, #0
 8002dda:	0154      	lsls	r4, r2, #5
 8002ddc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de0:	014b      	lsls	r3, r1, #5
 8002de2:	4619      	mov	r1, r3
 8002de4:	4622      	mov	r2, r4
 8002de6:	1b49      	subs	r1, r1, r5
 8002de8:	eb62 0206 	sbc.w	r2, r2, r6
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	f04f 0400 	mov.w	r4, #0
 8002df4:	0194      	lsls	r4, r2, #6
 8002df6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dfa:	018b      	lsls	r3, r1, #6
 8002dfc:	1a5b      	subs	r3, r3, r1
 8002dfe:	eb64 0402 	sbc.w	r4, r4, r2
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	00e2      	lsls	r2, r4, #3
 8002e0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e10:	00d9      	lsls	r1, r3, #3
 8002e12:	460b      	mov	r3, r1
 8002e14:	4614      	mov	r4, r2
 8002e16:	195b      	adds	r3, r3, r5
 8002e18:	eb44 0406 	adc.w	r4, r4, r6
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	02a2      	lsls	r2, r4, #10
 8002e26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e2a:	0299      	lsls	r1, r3, #10
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4614      	mov	r4, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	4621      	mov	r1, r4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f04f 0400 	mov.w	r4, #0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	4623      	mov	r3, r4
 8002e3e:	f7fd f9c9 	bl	80001d4 <__aeabi_uldivmod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	460c      	mov	r4, r1
 8002e46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	60bb      	str	r3, [r7, #8]
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e66:	60bb      	str	r3, [r7, #8]
      break;
 8002e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	007a1200 	.word	0x007a1200

08002e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e86:	681b      	ldr	r3, [r3, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000004 	.word	0x20000004

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e9c:	f7ff fff0 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0a9b      	lsrs	r3, r3, #10
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eae:	5cd3      	ldrb	r3, [r2, r3]
 8002eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	08004580 	.word	0x08004580

08002ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ec4:	f7ff ffdc 	bl	8002e80 <HAL_RCC_GetHCLKFreq>
 8002ec8:	4601      	mov	r1, r0
 8002eca:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0b5b      	lsrs	r3, r3, #13
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	4a03      	ldr	r2, [pc, #12]	; (8002ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed6:	5cd3      	ldrb	r3, [r2, r3]
 8002ed8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	08004580 	.word	0x08004580

08002ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b06      	cmp	r3, #6
 8002f08:	d007      	beq.n	8002f1a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f042 0201 	orr.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e01d      	b.n	8002f7e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd ffa2 	bl	8000ea0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 fb12 	bl	8003598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e01d      	b.n	8002fd4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fd ff4f 	bl	8000e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f000 fae7 	bl	8003598 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2201      	movs	r2, #1
 8002fec:	6839      	ldr	r1, [r7, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fcde 	bl	80039b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a10      	ldr	r2, [pc, #64]	; (800303c <HAL_TIM_PWM_Start+0x60>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d107      	bne.n	800300e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800300c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d007      	beq.n	8003030 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000

08003040 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2200      	movs	r2, #0
 8003050:	6839      	ldr	r1, [r7, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fcac 	bl	80039b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <HAL_TIM_PWM_Stop+0x94>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d117      	bne.n	8003092 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	f241 1311 	movw	r3, #4369	; 0x1111
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10f      	bne.n	8003092 <HAL_TIM_PWM_Stop+0x52>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a1a      	ldr	r2, [r3, #32]
 8003078:	f240 4344 	movw	r3, #1092	; 0x444
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <HAL_TIM_PWM_Stop+0x52>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	f241 1311 	movw	r3, #4369	; 0x1111
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10f      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0x82>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1a      	ldr	r2, [r3, #32]
 80030a8:	f240 4344 	movw	r3, #1092	; 0x444
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d107      	bne.n	80030c2 <HAL_TIM_PWM_Stop+0x82>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40010000 	.word	0x40010000

080030d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d122      	bne.n	8003134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11b      	bne.n	8003134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0202 	mvn.w	r2, #2
 8003104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa1e 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa10 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 fa21 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d122      	bne.n	8003188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d11b      	bne.n	8003188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0204 	mvn.w	r2, #4
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f9f4 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f9e6 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f9f7 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b08      	cmp	r3, #8
 8003194:	d122      	bne.n	80031dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d11b      	bne.n	80031dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0208 	mvn.w	r2, #8
 80031ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f9ca 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9bc 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f9cd 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0210 	mvn.w	r2, #16
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2208      	movs	r2, #8
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9a0 	bl	800355c <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f992 	bl	8003548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f9a3 	bl	8003570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10e      	bne.n	800325c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0201 	mvn.w	r2, #1
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f96c 	bl	8003534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d10e      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d107      	bne.n	8003288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fd44 	bl	8003d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d10e      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d107      	bne.n	80032b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f968 	bl	8003584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d10e      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0320 	and.w	r3, r3, #32
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d107      	bne.n	80032e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0220 	mvn.w	r2, #32
 80032d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fd fc16 	bl	8000b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_TIM_OC_ConfigChannel+0x1a>
 80032fe:	2302      	movs	r3, #2
 8003300:	e04e      	b.n	80033a0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b0c      	cmp	r3, #12
 8003316:	d839      	bhi.n	800338c <HAL_TIM_OC_ConfigChannel+0xa4>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_TIM_OC_ConfigChannel+0x38>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003355 	.word	0x08003355
 8003324:	0800338d 	.word	0x0800338d
 8003328:	0800338d 	.word	0x0800338d
 800332c:	0800338d 	.word	0x0800338d
 8003330:	08003363 	.word	0x08003363
 8003334:	0800338d 	.word	0x0800338d
 8003338:	0800338d 	.word	0x0800338d
 800333c:	0800338d 	.word	0x0800338d
 8003340:	08003371 	.word	0x08003371
 8003344:	0800338d 	.word	0x0800338d
 8003348:	0800338d 	.word	0x0800338d
 800334c:	0800338d 	.word	0x0800338d
 8003350:	0800337f 	.word	0x0800337f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f99c 	bl	8003698 <TIM_OC1_SetConfig>
      break;
 8003360:	e015      	b.n	800338e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f9fb 	bl	8003764 <TIM_OC2_SetConfig>
      break;
 800336e:	e00e      	b.n	800338e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fa60 	bl	800383c <TIM_OC3_SetConfig>
      break;
 800337c:	e007      	b.n	800338e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fac3 	bl	8003910 <TIM_OC4_SetConfig>
      break;
 800338a:	e000      	b.n	800338e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 800338c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033be:	2302      	movs	r3, #2
 80033c0:	e0b4      	b.n	800352c <HAL_TIM_PWM_ConfigChannel+0x184>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b0c      	cmp	r3, #12
 80033d6:	f200 809f 	bhi.w	8003518 <HAL_TIM_PWM_ConfigChannel+0x170>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003415 	.word	0x08003415
 80033e4:	08003519 	.word	0x08003519
 80033e8:	08003519 	.word	0x08003519
 80033ec:	08003519 	.word	0x08003519
 80033f0:	08003455 	.word	0x08003455
 80033f4:	08003519 	.word	0x08003519
 80033f8:	08003519 	.word	0x08003519
 80033fc:	08003519 	.word	0x08003519
 8003400:	08003497 	.word	0x08003497
 8003404:	08003519 	.word	0x08003519
 8003408:	08003519 	.word	0x08003519
 800340c:	08003519 	.word	0x08003519
 8003410:	080034d7 	.word	0x080034d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 f93c 	bl	8003698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0208 	orr.w	r2, r2, #8
 800342e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0204 	bic.w	r2, r2, #4
 800343e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6999      	ldr	r1, [r3, #24]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	619a      	str	r2, [r3, #24]
      break;
 8003452:	e062      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f982 	bl	8003764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	619a      	str	r2, [r3, #24]
      break;
 8003494:	e041      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f9cd 	bl	800383c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0208 	orr.w	r2, r2, #8
 80034b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0204 	bic.w	r2, r2, #4
 80034c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
      break;
 80034d4:	e021      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fa17 	bl	8003910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	021a      	lsls	r2, r3, #8
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	61da      	str	r2, [r3, #28]
      break;
 8003516:	e000      	b.n	800351a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003518:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a34      	ldr	r2, [pc, #208]	; (800367c <TIM_Base_SetConfig+0xe4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00f      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d00b      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a31      	ldr	r2, [pc, #196]	; (8003680 <TIM_Base_SetConfig+0xe8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d007      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a30      	ldr	r2, [pc, #192]	; (8003684 <TIM_Base_SetConfig+0xec>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_Base_SetConfig+0x38>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a2f      	ldr	r2, [pc, #188]	; (8003688 <TIM_Base_SetConfig+0xf0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d108      	bne.n	80035e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_Base_SetConfig+0xe4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01b      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d017      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a22      	ldr	r2, [pc, #136]	; (8003680 <TIM_Base_SetConfig+0xe8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a21      	ldr	r2, [pc, #132]	; (8003684 <TIM_Base_SetConfig+0xec>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00f      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a20      	ldr	r2, [pc, #128]	; (8003688 <TIM_Base_SetConfig+0xf0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00b      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1f      	ldr	r2, [pc, #124]	; (800368c <TIM_Base_SetConfig+0xf4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <TIM_Base_SetConfig+0xf8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_Base_SetConfig+0x8a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <TIM_Base_SetConfig+0xfc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d108      	bne.n	8003634 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a08      	ldr	r2, [pc, #32]	; (800367c <TIM_Base_SetConfig+0xe4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d103      	bne.n	8003668 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	615a      	str	r2, [r3, #20]
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800

08003698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0201 	bic.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 0302 	bic.w	r3, r3, #2
 80036e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <TIM_OC1_SetConfig+0xc8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d10c      	bne.n	800370e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0308 	bic.w	r3, r3, #8
 80036fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <TIM_OC1_SetConfig+0xc8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d111      	bne.n	800373a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	621a      	str	r2, [r3, #32]
}
 8003754:	bf00      	nop
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	40010000 	.word	0x40010000

08003764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f023 0210 	bic.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800379a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0320 	bic.w	r3, r3, #32
 80037ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <TIM_OC2_SetConfig+0xd4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d10d      	bne.n	80037e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a15      	ldr	r2, [pc, #84]	; (8003838 <TIM_OC2_SetConfig+0xd4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d113      	bne.n	8003810 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	621a      	str	r2, [r3, #32]
}
 800382a:	bf00      	nop
 800382c:	371c      	adds	r7, #28
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000

0800383c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a1d      	ldr	r2, [pc, #116]	; (800390c <TIM_OC3_SetConfig+0xd0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10d      	bne.n	80038b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <TIM_OC3_SetConfig+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d113      	bne.n	80038e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	621a      	str	r2, [r3, #32]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40010000 	.word	0x40010000

08003910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	021b      	lsls	r3, r3, #8
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800395a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	031b      	lsls	r3, r3, #12
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <TIM_OC4_SetConfig+0x9c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d109      	bne.n	8003984 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000

080039b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2201      	movs	r2, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a1a      	ldr	r2, [r3, #32]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	401a      	ands	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	6839      	ldr	r1, [r7, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 f989 	bl	8003d24 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d007      	beq.n	8003a44 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	6839      	ldr	r1, [r7, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f95f 	bl	8003d24 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6a1a      	ldr	r2, [r3, #32]
 8003a6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <HAL_TIMEx_PWMN_Stop+0x48>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	f240 4344 	movw	r3, #1092	; 0x444
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <HAL_TIMEx_PWMN_Stop+0x48>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_TIMEx_PWMN_Stop+0x78>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	f240 4344 	movw	r3, #1092	; 0x444
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <HAL_TIMEx_PWMN_Stop+0x78>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e04c      	b.n	8003b84 <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d005      	beq.n	8003b0a <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d002      	beq.n	8003b0a <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b30      	cmp	r3, #48	; 0x30
 8003b08:	d10f      	bne.n	8003b2a <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b18:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0204 	bic.w	r2, r2, #4
 8003b48:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b68:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0220 	orr.w	r2, r2, #32
 8003b78:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e050      	b.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf4:	d013      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a18      	ldr	r2, [pc, #96]	; (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40014000 	.word	0x40014000

08003c6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e03d      	b.n	8003d04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2204      	movs	r2, #4
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6a1a      	ldr	r2, [r3, #32]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
}
 8003d62:	bf00      	nop
 8003d64:	371c      	adds	r7, #28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e03f      	b.n	8003e00 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d106      	bne.n	8003d9a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7fd f901 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2224      	movs	r2, #36	; 0x24
 8003d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f828 	bl	8003e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691a      	ldr	r2, [r3, #16]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	69db      	ldr	r3, [r3, #28]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e4a:	f023 030c 	bic.w	r3, r3, #12
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	430b      	orrs	r3, r1
 8003e56:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e76:	f040 818b 	bne.w	8004190 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4ac1      	ldr	r2, [pc, #772]	; (8004184 <UART_SetConfig+0x37c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d005      	beq.n	8003e90 <UART_SetConfig+0x88>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4abf      	ldr	r2, [pc, #764]	; (8004188 <UART_SetConfig+0x380>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	f040 80bd 	bne.w	800400a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e90:	f7ff f816 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 8003e94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	461d      	mov	r5, r3
 8003e9a:	f04f 0600 	mov.w	r6, #0
 8003e9e:	46a8      	mov	r8, r5
 8003ea0:	46b1      	mov	r9, r6
 8003ea2:	eb18 0308 	adds.w	r3, r8, r8
 8003ea6:	eb49 0409 	adc.w	r4, r9, r9
 8003eaa:	4698      	mov	r8, r3
 8003eac:	46a1      	mov	r9, r4
 8003eae:	eb18 0805 	adds.w	r8, r8, r5
 8003eb2:	eb49 0906 	adc.w	r9, r9, r6
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ec2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ec6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003eca:	4688      	mov	r8, r1
 8003ecc:	4691      	mov	r9, r2
 8003ece:	eb18 0005 	adds.w	r0, r8, r5
 8003ed2:	eb49 0106 	adc.w	r1, r9, r6
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	461d      	mov	r5, r3
 8003edc:	f04f 0600 	mov.w	r6, #0
 8003ee0:	196b      	adds	r3, r5, r5
 8003ee2:	eb46 0406 	adc.w	r4, r6, r6
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4623      	mov	r3, r4
 8003eea:	f7fc f973 	bl	80001d4 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4ba5      	ldr	r3, [pc, #660]	; (800418c <UART_SetConfig+0x384>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	461d      	mov	r5, r3
 8003f04:	f04f 0600 	mov.w	r6, #0
 8003f08:	46a9      	mov	r9, r5
 8003f0a:	46b2      	mov	sl, r6
 8003f0c:	eb19 0309 	adds.w	r3, r9, r9
 8003f10:	eb4a 040a 	adc.w	r4, sl, sl
 8003f14:	4699      	mov	r9, r3
 8003f16:	46a2      	mov	sl, r4
 8003f18:	eb19 0905 	adds.w	r9, r9, r5
 8003f1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f34:	4689      	mov	r9, r1
 8003f36:	4692      	mov	sl, r2
 8003f38:	eb19 0005 	adds.w	r0, r9, r5
 8003f3c:	eb4a 0106 	adc.w	r1, sl, r6
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	461d      	mov	r5, r3
 8003f46:	f04f 0600 	mov.w	r6, #0
 8003f4a:	196b      	adds	r3, r5, r5
 8003f4c:	eb46 0406 	adc.w	r4, r6, r6
 8003f50:	461a      	mov	r2, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	f7fc f93e 	bl	80001d4 <__aeabi_uldivmod>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	; (800418c <UART_SetConfig+0x384>)
 8003f60:	fba3 1302 	umull	r1, r3, r3, r2
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	2164      	movs	r1, #100	; 0x64
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	3332      	adds	r3, #50	; 0x32
 8003f72:	4a86      	ldr	r2, [pc, #536]	; (800418c <UART_SetConfig+0x384>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f80:	4498      	add	r8, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	461d      	mov	r5, r3
 8003f86:	f04f 0600 	mov.w	r6, #0
 8003f8a:	46a9      	mov	r9, r5
 8003f8c:	46b2      	mov	sl, r6
 8003f8e:	eb19 0309 	adds.w	r3, r9, r9
 8003f92:	eb4a 040a 	adc.w	r4, sl, sl
 8003f96:	4699      	mov	r9, r3
 8003f98:	46a2      	mov	sl, r4
 8003f9a:	eb19 0905 	adds.w	r9, r9, r5
 8003f9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fb6:	4689      	mov	r9, r1
 8003fb8:	4692      	mov	sl, r2
 8003fba:	eb19 0005 	adds.w	r0, r9, r5
 8003fbe:	eb4a 0106 	adc.w	r1, sl, r6
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	f04f 0600 	mov.w	r6, #0
 8003fcc:	196b      	adds	r3, r5, r5
 8003fce:	eb46 0406 	adc.w	r4, r6, r6
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	f7fc f8fd 	bl	80001d4 <__aeabi_uldivmod>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <UART_SetConfig+0x384>)
 8003fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2164      	movs	r1, #100	; 0x64
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	3332      	adds	r3, #50	; 0x32
 8003ff4:	4a65      	ldr	r2, [pc, #404]	; (800418c <UART_SetConfig+0x384>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 0207 	and.w	r2, r3, #7
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4442      	add	r2, r8
 8004006:	609a      	str	r2, [r3, #8]
 8004008:	e26f      	b.n	80044ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800400a:	f7fe ff45 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 800400e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	461d      	mov	r5, r3
 8004014:	f04f 0600 	mov.w	r6, #0
 8004018:	46a8      	mov	r8, r5
 800401a:	46b1      	mov	r9, r6
 800401c:	eb18 0308 	adds.w	r3, r8, r8
 8004020:	eb49 0409 	adc.w	r4, r9, r9
 8004024:	4698      	mov	r8, r3
 8004026:	46a1      	mov	r9, r4
 8004028:	eb18 0805 	adds.w	r8, r8, r5
 800402c:	eb49 0906 	adc.w	r9, r9, r6
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800403c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004040:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004044:	4688      	mov	r8, r1
 8004046:	4691      	mov	r9, r2
 8004048:	eb18 0005 	adds.w	r0, r8, r5
 800404c:	eb49 0106 	adc.w	r1, r9, r6
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	461d      	mov	r5, r3
 8004056:	f04f 0600 	mov.w	r6, #0
 800405a:	196b      	adds	r3, r5, r5
 800405c:	eb46 0406 	adc.w	r4, r6, r6
 8004060:	461a      	mov	r2, r3
 8004062:	4623      	mov	r3, r4
 8004064:	f7fc f8b6 	bl	80001d4 <__aeabi_uldivmod>
 8004068:	4603      	mov	r3, r0
 800406a:	460c      	mov	r4, r1
 800406c:	461a      	mov	r2, r3
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <UART_SetConfig+0x384>)
 8004070:	fba3 2302 	umull	r2, r3, r3, r2
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	461d      	mov	r5, r3
 800407e:	f04f 0600 	mov.w	r6, #0
 8004082:	46a9      	mov	r9, r5
 8004084:	46b2      	mov	sl, r6
 8004086:	eb19 0309 	adds.w	r3, r9, r9
 800408a:	eb4a 040a 	adc.w	r4, sl, sl
 800408e:	4699      	mov	r9, r3
 8004090:	46a2      	mov	sl, r4
 8004092:	eb19 0905 	adds.w	r9, r9, r5
 8004096:	eb4a 0a06 	adc.w	sl, sl, r6
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ae:	4689      	mov	r9, r1
 80040b0:	4692      	mov	sl, r2
 80040b2:	eb19 0005 	adds.w	r0, r9, r5
 80040b6:	eb4a 0106 	adc.w	r1, sl, r6
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	461d      	mov	r5, r3
 80040c0:	f04f 0600 	mov.w	r6, #0
 80040c4:	196b      	adds	r3, r5, r5
 80040c6:	eb46 0406 	adc.w	r4, r6, r6
 80040ca:	461a      	mov	r2, r3
 80040cc:	4623      	mov	r3, r4
 80040ce:	f7fc f881 	bl	80001d4 <__aeabi_uldivmod>
 80040d2:	4603      	mov	r3, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b2c      	ldr	r3, [pc, #176]	; (800418c <UART_SetConfig+0x384>)
 80040da:	fba3 1302 	umull	r1, r3, r3, r2
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2164      	movs	r1, #100	; 0x64
 80040e2:	fb01 f303 	mul.w	r3, r1, r3
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a27      	ldr	r2, [pc, #156]	; (800418c <UART_SetConfig+0x384>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040fa:	4498      	add	r8, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	461d      	mov	r5, r3
 8004100:	f04f 0600 	mov.w	r6, #0
 8004104:	46a9      	mov	r9, r5
 8004106:	46b2      	mov	sl, r6
 8004108:	eb19 0309 	adds.w	r3, r9, r9
 800410c:	eb4a 040a 	adc.w	r4, sl, sl
 8004110:	4699      	mov	r9, r3
 8004112:	46a2      	mov	sl, r4
 8004114:	eb19 0905 	adds.w	r9, r9, r5
 8004118:	eb4a 0a06 	adc.w	sl, sl, r6
 800411c:	f04f 0100 	mov.w	r1, #0
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004128:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800412c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004130:	4689      	mov	r9, r1
 8004132:	4692      	mov	sl, r2
 8004134:	eb19 0005 	adds.w	r0, r9, r5
 8004138:	eb4a 0106 	adc.w	r1, sl, r6
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	461d      	mov	r5, r3
 8004142:	f04f 0600 	mov.w	r6, #0
 8004146:	196b      	adds	r3, r5, r5
 8004148:	eb46 0406 	adc.w	r4, r6, r6
 800414c:	461a      	mov	r2, r3
 800414e:	4623      	mov	r3, r4
 8004150:	f7fc f840 	bl	80001d4 <__aeabi_uldivmod>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
 8004158:	461a      	mov	r2, r3
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <UART_SetConfig+0x384>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	; 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	3332      	adds	r3, #50	; 0x32
 800416e:	4a07      	ldr	r2, [pc, #28]	; (800418c <UART_SetConfig+0x384>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 0207 	and.w	r2, r3, #7
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4442      	add	r2, r8
 8004180:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004182:	e1b2      	b.n	80044ea <UART_SetConfig+0x6e2>
 8004184:	40011000 	.word	0x40011000
 8004188:	40011400 	.word	0x40011400
 800418c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4ad7      	ldr	r2, [pc, #860]	; (80044f4 <UART_SetConfig+0x6ec>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d005      	beq.n	80041a6 <UART_SetConfig+0x39e>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4ad6      	ldr	r2, [pc, #856]	; (80044f8 <UART_SetConfig+0x6f0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	f040 80d1 	bne.w	8004348 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80041a6:	f7fe fe8b 	bl	8002ec0 <HAL_RCC_GetPCLK2Freq>
 80041aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	469a      	mov	sl, r3
 80041b0:	f04f 0b00 	mov.w	fp, #0
 80041b4:	46d0      	mov	r8, sl
 80041b6:	46d9      	mov	r9, fp
 80041b8:	eb18 0308 	adds.w	r3, r8, r8
 80041bc:	eb49 0409 	adc.w	r4, r9, r9
 80041c0:	4698      	mov	r8, r3
 80041c2:	46a1      	mov	r9, r4
 80041c4:	eb18 080a 	adds.w	r8, r8, sl
 80041c8:	eb49 090b 	adc.w	r9, r9, fp
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041e0:	4688      	mov	r8, r1
 80041e2:	4691      	mov	r9, r2
 80041e4:	eb1a 0508 	adds.w	r5, sl, r8
 80041e8:	eb4b 0609 	adc.w	r6, fp, r9
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	f04f 0400 	mov.w	r4, #0
 80041fe:	0094      	lsls	r4, r2, #2
 8004200:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004204:	008b      	lsls	r3, r1, #2
 8004206:	461a      	mov	r2, r3
 8004208:	4623      	mov	r3, r4
 800420a:	4628      	mov	r0, r5
 800420c:	4631      	mov	r1, r6
 800420e:	f7fb ffe1 	bl	80001d4 <__aeabi_uldivmod>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	461a      	mov	r2, r3
 8004218:	4bb8      	ldr	r3, [pc, #736]	; (80044fc <UART_SetConfig+0x6f4>)
 800421a:	fba3 2302 	umull	r2, r3, r3, r2
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	469b      	mov	fp, r3
 8004228:	f04f 0c00 	mov.w	ip, #0
 800422c:	46d9      	mov	r9, fp
 800422e:	46e2      	mov	sl, ip
 8004230:	eb19 0309 	adds.w	r3, r9, r9
 8004234:	eb4a 040a 	adc.w	r4, sl, sl
 8004238:	4699      	mov	r9, r3
 800423a:	46a2      	mov	sl, r4
 800423c:	eb19 090b 	adds.w	r9, r9, fp
 8004240:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004250:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004254:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004258:	4689      	mov	r9, r1
 800425a:	4692      	mov	sl, r2
 800425c:	eb1b 0509 	adds.w	r5, fp, r9
 8004260:	eb4c 060a 	adc.w	r6, ip, sl
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4619      	mov	r1, r3
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	f04f 0400 	mov.w	r4, #0
 8004276:	0094      	lsls	r4, r2, #2
 8004278:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800427c:	008b      	lsls	r3, r1, #2
 800427e:	461a      	mov	r2, r3
 8004280:	4623      	mov	r3, r4
 8004282:	4628      	mov	r0, r5
 8004284:	4631      	mov	r1, r6
 8004286:	f7fb ffa5 	bl	80001d4 <__aeabi_uldivmod>
 800428a:	4603      	mov	r3, r0
 800428c:	460c      	mov	r4, r1
 800428e:	461a      	mov	r2, r3
 8004290:	4b9a      	ldr	r3, [pc, #616]	; (80044fc <UART_SetConfig+0x6f4>)
 8004292:	fba3 1302 	umull	r1, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	2164      	movs	r1, #100	; 0x64
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	3332      	adds	r3, #50	; 0x32
 80042a4:	4a95      	ldr	r2, [pc, #596]	; (80044fc <UART_SetConfig+0x6f4>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	095b      	lsrs	r3, r3, #5
 80042ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b0:	4498      	add	r8, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	469b      	mov	fp, r3
 80042b6:	f04f 0c00 	mov.w	ip, #0
 80042ba:	46d9      	mov	r9, fp
 80042bc:	46e2      	mov	sl, ip
 80042be:	eb19 0309 	adds.w	r3, r9, r9
 80042c2:	eb4a 040a 	adc.w	r4, sl, sl
 80042c6:	4699      	mov	r9, r3
 80042c8:	46a2      	mov	sl, r4
 80042ca:	eb19 090b 	adds.w	r9, r9, fp
 80042ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042e6:	4689      	mov	r9, r1
 80042e8:	4692      	mov	sl, r2
 80042ea:	eb1b 0509 	adds.w	r5, fp, r9
 80042ee:	eb4c 060a 	adc.w	r6, ip, sl
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4619      	mov	r1, r3
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	f04f 0400 	mov.w	r4, #0
 8004304:	0094      	lsls	r4, r2, #2
 8004306:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800430a:	008b      	lsls	r3, r1, #2
 800430c:	461a      	mov	r2, r3
 800430e:	4623      	mov	r3, r4
 8004310:	4628      	mov	r0, r5
 8004312:	4631      	mov	r1, r6
 8004314:	f7fb ff5e 	bl	80001d4 <__aeabi_uldivmod>
 8004318:	4603      	mov	r3, r0
 800431a:	460c      	mov	r4, r1
 800431c:	461a      	mov	r2, r3
 800431e:	4b77      	ldr	r3, [pc, #476]	; (80044fc <UART_SetConfig+0x6f4>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	; 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	3332      	adds	r3, #50	; 0x32
 8004332:	4a72      	ldr	r2, [pc, #456]	; (80044fc <UART_SetConfig+0x6f4>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4442      	add	r2, r8
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	e0d0      	b.n	80044ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7fe fda6 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>
 800434c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	469a      	mov	sl, r3
 8004352:	f04f 0b00 	mov.w	fp, #0
 8004356:	46d0      	mov	r8, sl
 8004358:	46d9      	mov	r9, fp
 800435a:	eb18 0308 	adds.w	r3, r8, r8
 800435e:	eb49 0409 	adc.w	r4, r9, r9
 8004362:	4698      	mov	r8, r3
 8004364:	46a1      	mov	r9, r4
 8004366:	eb18 080a 	adds.w	r8, r8, sl
 800436a:	eb49 090b 	adc.w	r9, r9, fp
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800437a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800437e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004382:	4688      	mov	r8, r1
 8004384:	4691      	mov	r9, r2
 8004386:	eb1a 0508 	adds.w	r5, sl, r8
 800438a:	eb4b 0609 	adc.w	r6, fp, r9
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4619      	mov	r1, r3
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	f04f 0400 	mov.w	r4, #0
 80043a0:	0094      	lsls	r4, r2, #2
 80043a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043a6:	008b      	lsls	r3, r1, #2
 80043a8:	461a      	mov	r2, r3
 80043aa:	4623      	mov	r3, r4
 80043ac:	4628      	mov	r0, r5
 80043ae:	4631      	mov	r1, r6
 80043b0:	f7fb ff10 	bl	80001d4 <__aeabi_uldivmod>
 80043b4:	4603      	mov	r3, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b50      	ldr	r3, [pc, #320]	; (80044fc <UART_SetConfig+0x6f4>)
 80043bc:	fba3 2302 	umull	r2, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	469b      	mov	fp, r3
 80043ca:	f04f 0c00 	mov.w	ip, #0
 80043ce:	46d9      	mov	r9, fp
 80043d0:	46e2      	mov	sl, ip
 80043d2:	eb19 0309 	adds.w	r3, r9, r9
 80043d6:	eb4a 040a 	adc.w	r4, sl, sl
 80043da:	4699      	mov	r9, r3
 80043dc:	46a2      	mov	sl, r4
 80043de:	eb19 090b 	adds.w	r9, r9, fp
 80043e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043e6:	f04f 0100 	mov.w	r1, #0
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043fa:	4689      	mov	r9, r1
 80043fc:	4692      	mov	sl, r2
 80043fe:	eb1b 0509 	adds.w	r5, fp, r9
 8004402:	eb4c 060a 	adc.w	r6, ip, sl
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	4619      	mov	r1, r3
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	f04f 0400 	mov.w	r4, #0
 8004418:	0094      	lsls	r4, r2, #2
 800441a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	461a      	mov	r2, r3
 8004422:	4623      	mov	r3, r4
 8004424:	4628      	mov	r0, r5
 8004426:	4631      	mov	r1, r6
 8004428:	f7fb fed4 	bl	80001d4 <__aeabi_uldivmod>
 800442c:	4603      	mov	r3, r0
 800442e:	460c      	mov	r4, r1
 8004430:	461a      	mov	r2, r3
 8004432:	4b32      	ldr	r3, [pc, #200]	; (80044fc <UART_SetConfig+0x6f4>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	; 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <UART_SetConfig+0x6f4>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004452:	4498      	add	r8, r3
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	469b      	mov	fp, r3
 8004458:	f04f 0c00 	mov.w	ip, #0
 800445c:	46d9      	mov	r9, fp
 800445e:	46e2      	mov	sl, ip
 8004460:	eb19 0309 	adds.w	r3, r9, r9
 8004464:	eb4a 040a 	adc.w	r4, sl, sl
 8004468:	4699      	mov	r9, r3
 800446a:	46a2      	mov	sl, r4
 800446c:	eb19 090b 	adds.w	r9, r9, fp
 8004470:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004474:	f04f 0100 	mov.w	r1, #0
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004480:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004484:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004488:	4689      	mov	r9, r1
 800448a:	4692      	mov	sl, r2
 800448c:	eb1b 0509 	adds.w	r5, fp, r9
 8004490:	eb4c 060a 	adc.w	r6, ip, sl
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	0094      	lsls	r4, r2, #2
 80044a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044ac:	008b      	lsls	r3, r1, #2
 80044ae:	461a      	mov	r2, r3
 80044b0:	4623      	mov	r3, r4
 80044b2:	4628      	mov	r0, r5
 80044b4:	4631      	mov	r1, r6
 80044b6:	f7fb fe8d 	bl	80001d4 <__aeabi_uldivmod>
 80044ba:	4603      	mov	r3, r0
 80044bc:	460c      	mov	r4, r1
 80044be:	461a      	mov	r2, r3
 80044c0:	4b0e      	ldr	r3, [pc, #56]	; (80044fc <UART_SetConfig+0x6f4>)
 80044c2:	fba3 1302 	umull	r1, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2164      	movs	r1, #100	; 0x64
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <UART_SetConfig+0x6f4>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 020f 	and.w	r2, r3, #15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4442      	add	r2, r8
 80044e6:	609a      	str	r2, [r3, #8]
}
 80044e8:	e7ff      	b.n	80044ea <UART_SetConfig+0x6e2>
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044f4:	40011000 	.word	0x40011000
 80044f8:	40011400 	.word	0x40011400
 80044fc:	51eb851f 	.word	0x51eb851f

08004500 <__libc_init_array>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	4e0d      	ldr	r6, [pc, #52]	; (8004538 <__libc_init_array+0x38>)
 8004504:	4c0d      	ldr	r4, [pc, #52]	; (800453c <__libc_init_array+0x3c>)
 8004506:	1ba4      	subs	r4, r4, r6
 8004508:	10a4      	asrs	r4, r4, #2
 800450a:	2500      	movs	r5, #0
 800450c:	42a5      	cmp	r5, r4
 800450e:	d109      	bne.n	8004524 <__libc_init_array+0x24>
 8004510:	4e0b      	ldr	r6, [pc, #44]	; (8004540 <__libc_init_array+0x40>)
 8004512:	4c0c      	ldr	r4, [pc, #48]	; (8004544 <__libc_init_array+0x44>)
 8004514:	f000 f820 	bl	8004558 <_init>
 8004518:	1ba4      	subs	r4, r4, r6
 800451a:	10a4      	asrs	r4, r4, #2
 800451c:	2500      	movs	r5, #0
 800451e:	42a5      	cmp	r5, r4
 8004520:	d105      	bne.n	800452e <__libc_init_array+0x2e>
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004528:	4798      	blx	r3
 800452a:	3501      	adds	r5, #1
 800452c:	e7ee      	b.n	800450c <__libc_init_array+0xc>
 800452e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004532:	4798      	blx	r3
 8004534:	3501      	adds	r5, #1
 8004536:	e7f2      	b.n	800451e <__libc_init_array+0x1e>
 8004538:	08004598 	.word	0x08004598
 800453c:	08004598 	.word	0x08004598
 8004540:	08004598 	.word	0x08004598
 8004544:	0800459c 	.word	0x0800459c

08004548 <memset>:
 8004548:	4402      	add	r2, r0
 800454a:	4603      	mov	r3, r0
 800454c:	4293      	cmp	r3, r2
 800454e:	d100      	bne.n	8004552 <memset+0xa>
 8004550:	4770      	bx	lr
 8004552:	f803 1b01 	strb.w	r1, [r3], #1
 8004556:	e7f9      	b.n	800454c <memset+0x4>

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
